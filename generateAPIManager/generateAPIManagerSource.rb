require 'erb'
require 'xcodeproj'
require 'pathname'

def apimanager_m_template()
   %{
 //
 //  <%= @name %>.m
 //
 //  Copyright (c) 2018 longjianjiang. All rights reserved.
 //
 //  These api managers are generated by ruby script, you should not modify code
 //  in this file.


 #import "<%= @name %>.h"
 #import "Target_YWDefaultService.h"

 @interface <%= @name %>()<JXAPIManagerValidator>
 @end

 @implementation <%= @name %>

 #pragma mark - life cycle
 -(instancetype)init {
     if (self = [super init]) {
         self.validator = self;
     }
     return self;
 }

 #pragma mark - JXAPIManager
 - (NSString *)apiPath {
     return @"<%= @path %>";
 }

 - (NSString *)apiVersion {
     return @"v1.0";
 }

 - (NSString *)apiServiceIdentifier {
     return kYWDefaultServiceIdentifier;
 }

 - (JXNetworkingRequestType)apiRequestType {
     return <%= @method %>; 
 }


 #pragma mark - JXAPIManagerValidator
 - (JXNetworkingAPIManagerErrorType)jxManager:(JXBaseAPIManager *)manager isCorrectWithResponseData:(id)responseData {
     if ([responseData[@"code"] integerValue] == 20000) {
         return JXNetworkingAPIManagerErrorTypeParamsCorrect;
     }

     return JXNetworkingAPIManagerErrorTypeContentError;
 }

 - (JXNetworkingAPIManagerErrorType)jxManager:(JXBaseAPIManager *)manager isCorrectWithParamsForCallAPI:(NSDictionary *)params {
     return JXNetworkingAPIManagerErrorTypeParamsCorrect;
 }
 @end
   }
end


class APIManagerM
  include ERB::Util
  attr_accessor :name, :path, :method, :template

  def initialize(name, path, method, template)
     @name = name
     @path = path
     @method = method
     @template = template
  end

  def render
     ERB.new(@template).result(binding)
  end

  def save(file)
     File.open(file, "w+") do |f|
       f.write(render)
     end
  end
end


def createSource(name, path, method)
  fileName = "#{name}.m"
  manager = APIManagerM.new(name, path, method, apimanager_m_template)

  script_path = Pathname.new(__FILE__).realpath.to_s
  header_save_path = script_path[0, script_path.index('/ruby')] + '/MobYuWenApp/YWProject/Networking/APIManager'
  project_path = script_path[0, script_path.index('/ruby')] + '/MobYuWenApp.xcodeproj'

  manager.save(File.join(header_save_path, fileName))

  project = Xcodeproj::Project.open(project_path)
  target = project.targets.first

  # main_group只是工程所在目录
  group = project.main_group.find_subpath(File.join('MobYuWenApp', 'YWProject', 'Networking', 'APIManager'))
  # group.set_source_tree("SOURCE_ROOT")
  file_ref = group.new_reference(fileName)
  target.add_file_references([file_ref])
  project.save
end

